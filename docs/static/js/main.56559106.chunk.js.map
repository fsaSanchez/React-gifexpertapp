{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifgridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","protoTypes","PropTypes","func","isRequired","getGits","categoria","a","console","log","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifgridItem","props","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","i","GifExpertApp","categorias","c","ReactDOM","render","document","getElementById"],"mappings":"oNAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAC7B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KA6BI,OACI,sBAAMC,SAnBK,SAACC,GAEhBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IAOxBR,GAAc,SAAAS,GAAG,OAAGP,GAAH,mBAAiBO,OAElCN,EAAc,MAOd,SAGc,uBACAO,KAAK,OAAOC,MAAOT,EACnBU,SAhCE,SAACP,GAEzBF,EAAcE,EAAEQ,OAAOF,aAwCvBZ,EAAYe,WACZ,CACGd,cAAce,IAAUC,KAAKC,Y,2BCnDnBC,EAAO,uCAAC,WAAMC,GAAN,uBAAAC,EAAA,6DACjBC,QAAQC,IAAI,SACNC,EAFW,0DAE4CC,UAAUL,GAFtD,sDAGEM,MAAMF,GAHR,cAGfG,EAHe,gBAIDA,EAAUC,OAJT,uBAIdC,EAJc,EAIdA,KACDC,EAAMD,EAAKE,KAAI,SAAAC,GACpB,IAAD,EACI,MAAM,CACFC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QAVpB,kBAadM,GAbc,4CAAD,sDCEPO,EAAc,SAACC,GAExB,OACI,sBAAKC,UAAU,6CAAf,UACE,qBAAKC,IAAKF,EAAMN,IAAIR,IAAMiB,IAAKH,EAAMN,IAAIE,QACzC,4BAAII,EAAMN,IAAIE,YCFXQ,EAAU,SAAC,GAAiB,IAAhBtB,EAAe,EAAfA,UAGrB,ECLwB,SAACA,GAC5B,MAA0BlB,mBACtB,CACIiC,OAAO,GACPQ,SAAQ,IAHhB,mBAAOC,EAAP,KAAcC,EAAd,KAoBD,OAZEC,qBAAU,WAGR3B,EAAQC,GAAW2B,MAAK,SAAAC,GAAI,OAAGH,EAC3B,CACFV,OAAQa,EACPL,SAAQ,SAGb,CAACvB,IAGIwB,EDhBqBK,CAAa7B,GAA9Be,EAAP,EAAOA,OAAOQ,EAAd,EAAcA,QAId,OACI,qCACA,6BAAKvB,IACLuB,GAAW,mBAAGJ,UAAU,mCAAb,yBACX,qBAAKA,UAAU,kDAAf,SAGQJ,EAAOJ,KAAI,SAAAmB,GAAC,OACP,cAAC,EAAD,CAAyBlB,IAAKkB,GAAZA,EAAEjB,aEf5BkB,EAAe,WACxB,MACAjD,mBAAS,CAAC,cADV,mBAAQkD,EAAR,KAAoBnD,EAApB,KAIA,OACI,mCACA,gCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIImD,EAAWrB,KAAI,SAACsB,EAAEH,GAAH,OAGX,cAAC,EAAD,CAAiB9B,UAAWiC,GAAdA,Y,MCjBlCC,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.56559106.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategorias}) => {\r\nconst [inputValue, setinputValue] = useState('');\r\n\r\n/// Para poder escribir en el input que esta ligado al state\r\nconst handleInputChange=(e)=>\r\n{\r\nsetinputValue(e.target.value);\r\n\r\n\r\n}\r\n\r\n\r\nconst handleSubmit=(e)=>\r\n{\r\n    e.preventDefault();\r\n    if(inputValue.trim().length>2)\r\n    {\r\n        // Encaso de que categoria fuera arrary asi se agrega un nuevo elemeto\r\n       // Se agrega categoria al final fi fuera [...cat,inputValue] seria al inicio\r\n\r\n       // al cambiar el estado de categorias vuelve a renderizar el el componente\r\n       // donde esta el state de esta.\r\n        setCategorias(cat=>[inputValue,...cat]); \r\n        \r\n        setinputValue('');\r\n    }\r\n\r\n    \r\n}\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n\r\n             \r\n                      <input\r\n                      type=\"text\" value={inputValue}\r\n                      onChange={handleInputChange}\r\n                      />\r\n\r\n              {/* <button onClick={handleAdd} >Agregar</button> */}\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\n\r\nAddCategory.protoTypes=\r\n{\r\n   setCategorias:PropTypes.func.isRequired\r\n}","export const getGits=async(categoria)=>{\r\n    console.log('entra')\r\n    const url=`https://api.giphy.com/v1/gifs/search?limit=10&q=${encodeURI(categoria)}&api_key=LgVyn89xTyq56Ix9pmm96u4JSjN6bHld`;\r\nconst respuesta= await fetch(url);\r\nconst {data}= await respuesta.json();\r\nconst gifs= data.map(img=>\r\n{\r\n    return{\r\n        id:img.id,\r\n        title:img.title,\r\n        url:img.images?.downsized_medium.url\r\n    }\r\n})\r\nreturn gifs; // al ser async esta regresando un promesa\r\n}","import React from 'react'\r\n\r\nexport const GifgridItem = (props) => {\r\n  \r\n    return (\r\n        <div className=\"card animate__animated animate__backInLeft\">\r\n          <img src={props.img.url}  alt={props.img.title}/>\r\n          <p>{props.img.title}</p> \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifgridItem } from './GifgridItem';\r\n\r\n\r\nexport const GifGrid = ({categoria}) => {\r\n\r\n   ///Creamos un custom hub\r\n    const {images,loading}= useFetchGifs(categoria);\r\n\r\n \r\n\r\n    return (\r\n        <>\r\n        <h3>{categoria}</h3>\r\n       {loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}\r\n        <div className=\"card-grid animate__animated animate__backInLeft\">\r\n            {\r\n                \r\n                images.map(i => \r\n                    (<GifgridItem key={i.id}  img={i} /> \r\n            \r\n                    )\r\n                    )\r\n\r\n               \r\n             } \r\n             </div>\r\n      \r\n        </>\r\n    )\r\n}\r\n","import {useState,useEffect} from 'react'\r\nimport { getGits } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (categoria) => {\r\n const [state, setState] = useState(\r\n     {\r\n         images:[],\r\n         loading:true\r\n     }\r\n )\r\n\r\n /// abajo comemntario de useEfeec\r\n  useEffect(()=>\r\n {\r\n     \r\n    getGits(categoria).then(imgs=> setState(\r\n        {\r\n      images: imgs,\r\n       loading:false\r\n        }\r\n        ));\r\n},[categoria]);\r\n\r\n\r\nreturn state;\r\n}\r\n\r\n\r\n\r\n///useEffect Ayuda a quel metodo no se ejecute mas que en la primer\r\n    //vez que se renderiza, recordemos que cada que cambia el state se vuelve\r\n    // a renderizar el componete,   el valor final se ocupa para indicar si categoria cambio\r\n    // Se vuelve a renderizar el componente GifGrid , pero recordemos que este componete\r\n    // se agrega por cada uno de las categorias del array, etonces el array puede cambiar\r\n    //Pero la categoria de indece X no, en este ejmplo. al menos que ya se haya creado el\r\n    // el componete de la categoria X y por algun mitvo cambia el valor de ese indice, el\r\n    // use effect vuelve a ejecutar.\r\n","import React,{useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n    const  [categorias, setCategorias] = \r\n    useState(['one punch']);\r\n\r\n    \r\n    return (\r\n        <>\r\n        <div>\r\n            <h1>GifExpertApp</h1>\r\n            <AddCategory setCategorias={setCategorias}/>\r\n            <hr/>\r\n           \r\n        \r\n                {\r\n                categorias.map((c,i)=>\r\n                    \r\n                    ( \r\n                    <GifGrid key={c} categoria={c}/>\r\n                      ))\r\n                }\r\n           \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n \n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}